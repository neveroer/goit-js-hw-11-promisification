{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAAV,OAAqBC,YAAW,kBAAMF,EAAQF,KAAKA,OAGpEK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGrBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAMjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAACC,EAASC,GAK5BD,EAJqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAOlEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAEvCL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GAKnC,IAIMe,EAAkB,SAACC,EAAaC,EAAWC,GAC/C,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC5B,IANgCqB,EAAKC,EAM/B1B,GAN0ByB,EAMQ,IANHC,EAMQ,IALvCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMnDpB,YAAW,WACUsB,KAAKE,SAAW,GAGjC1B,EAAQ,CAACmB,EAAYQ,GAAI9B,IAEzBI,EAAOkB,EAAYQ,MAErB9B,OAIC+B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVvB,EAAU,KACjCC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAIFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.ec4bae1e007bffa20626.js","sourcesContent":["const delay = ms => {\n  return new Promise((resolve, reject) => setTimeout(() => resolve(ms), ms));\n};\n\nlet logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n////////////////////\n\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n  \tconst updatedUsers = allUsers.map(user =>\n    \tuser.name === userName ? { ...user, active: !user.active } : user,\n  \t);\n\n  \tresolve(updatedUsers);\n  });\n};\n\nlogger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n\n//////////////////////\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  return new Promise((resolve, reject) => {\n  \tconst delay = randomIntegerFromInterval(200, 500);\n  \tsetTimeout(() => {\n    \tconst canProcess = Math.random() > 0.3;\n\n    \tif (canProcess) {\n\t      resolve([transaction.id, delay]);\n\t    } else {\n\t      reject(transaction.id);\n\t    }\n\t }, delay);\n  });\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}